package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

type FirstUrl struct {
	Url    string       `json:"datos"` //url temporal. `` es para json
	Client *http.Client //guardar conexi√≥n
}

type AutoGenerated []struct {
	Origen struct {
		Productor string `json:"productor"`
		Web       string `json:"web"`
		Enlace    string `json:"enlace"`
		Language  string `json:"language"`
		Copyright string `json:"copyright"`
		NotaLegal string `json:"notaLegal"`
	} `json:"origen"`
	Elaborado  string `json:"elaborado"`
	Nombre     string `json:"nombre"`
	Provincia  string `json:"provincia"`
	Prediccion struct {
		Dia []struct {
			ProbPrecipitacion []struct {
				Value   int    `json:"value"`
				Periodo string `json:"periodo"`
			} `json:"probPrecipitacion"`
			CotaNieveProv []struct {
				Value   string `json:"value"`
				Periodo string `json:"periodo"`
			} `json:"cotaNieveProv"`
			EstadoCielo []struct {
				Value       string `json:"value"`
				Periodo     string `json:"periodo"`
				Descripcion string `json:"descripcion"`
			} `json:"estadoCielo"`
			Viento []struct {
				Direccion string `json:"direccion"`
				Velocidad int    `json:"velocidad"`
				Periodo   string `json:"periodo"`
			} `json:"viento"`
			RachaMax []struct {
				Value   string `json:"value"`
				Periodo string `json:"periodo"`
			} `json:"rachaMax"`
			Temperatura struct {
				Maxima int `json:"maxima"`
				Minima int `json:"minima"`
				Dato   []struct {
					Value int `json:"value"`
					Hora  int `json:"hora"`
				} `json:"dato"`
			} `json:"temperatura"`
			SensTermica struct {
				Maxima int `json:"maxima"`
				Minima int `json:"minima"`
				Dato   []struct {
					Value int `json:"value"`
					Hora  int `json:"hora"`
				} `json:"dato"`
			} `json:"sensTermica"`
			HumedadRelativa struct {
				Maxima int `json:"maxima"`
				Minima int `json:"minima"`
				Dato   []struct {
					Value int `json:"value"`
					Hora  int `json:"hora"`
				} `json:"dato"`
			} `json:"humedadRelativa"`
			UvMax int    `json:"uvMax,omitempty"`
			Fecha string `json:"fecha"`
		} `json:"dia"`
	} `json:"prediccion"`
	ID      int     `json:"id"`
	Version float64 `json:"version"`
}

type Diaria struct {
	ProbPrecipitacio int       `json:"probPrecipitacion"`
	TemperaturaMax   int       `json:"maxima"`
	TemperaturaMin   int       `json:"minima"`
	HumitatRelativa  int       `json:"humedadRelativa"`
	Time             time.Time `json:"-"` //el json no tiene campo vinculado, es un campo que creamos nosotros
}

func (d *Diaria) getPredictions() (*Diaria, error) {
	url, _ := getFirstUrl()
	valors, err := readObjects(url)
	return valors, err
}

func getFirstUrl() (string, error) {
	url := os.Getenv("AEMET_URL")
	request, _ := http.NewRequest("GET", url, nil)

	//header para aemet
	request.Header.Add("cache-control", "no-cache")

	response, err := http.DefaultClient.Do(request)
	if err != nil {
		log.Println("Error connecting to AEMET", err)
		return "", err
	}

	defer response.Body.Close()
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Println("Error reading JSON", err)
		return "", err
	}

	firstUrl := FirstUrl{}
	err = json.Unmarshal(body, &firstUrl)
	if err != nil {
		log.Println("Error Unmarshal json", err)
		return "", err
	}

	return firstUrl.Url, err
}

func readObjects(url string) (*Diaria, error) {
	request, _ := http.NewRequest("GET", url, nil)

	//header para aemet
	request.Header.Add("cache-control", "no-cache")

	response, err := http.DefaultClient.Do(request)
	if err != nil {
		log.Println("Error connecting to AEMET", err)
		return nil, err
	}

	defer response.Body.Close()
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Println("Error reading JSON", err)
		return nil, err
	}

	prediction := AutoGenerated{}
	var precipitacion, tempMax, tempMin, humedad int
	err = json.Unmarshal([]byte(body), &prediction)
	if err != nil {
		log.Println("Error Unmarshal json", err)
		return nil, err
	}

	precipitacion = prediction[0].Prediccion.Dia[0].ProbPrecipitacion[0].Value
	tempMax = prediction[0].Prediccion.Dia[0].Temperatura.Maxima
	tempMax = prediction[0].Prediccion.Dia[0].Temperatura.Minima
	humedad = prediction[0].Prediccion.Dia[0].HumedadRelativa.Maxima

	var dadesParte = Diaria{
		ProbPrecipitacio: precipitacion,
		TemperaturaMax:   tempMax,
		TemperaturaMin:   tempMin,
		HumitatRelativa:  humedad,
		Time:             time.Now(),
	}

	return &dadesParte, err
}
